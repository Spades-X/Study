import pandas as pd
from pathlib import Path
import argparse
import re
import logging
from datetime import datetime
import shutil
from openpyxl import load_workbook, Workbook
from openpyxl.utils.exceptions import IllegalCharacterError
import copy  # 新增copy模块

# ================== 路径安全处理 ==================
def safe_path(path, max_length=220):
    """Windows路径长度安全处理"""
    path = Path(path)
    str_path = str(path.resolve())

    if len(str_path) <= max_length:
        return path

    parent = path.parent
    stem = path.stem[:30]  # 保留文件名主体
    suffix = path.suffix
    counter = 1

    while True:
        new_name = f"{stem}_{counter}{suffix}"
        new_path = parent / new_name
        if len(str(new_path)) <= max_length:
            return new_path
        counter += 1
        stem = stem[:-1]
        if not stem:
            raise ValueError(f"无法生成有效路径: {str_path}")

# ================== 日志系统配置 ==================
def setup_logger(output_folder):
    """改进后的日志系统（确保始终返回有效logger）"""
    logs_dir = output_folder / "操作日志"
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    formatter = logging.Formatter(
        '[%(asctime)s] %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    try:
        # 确保日志目录存在
        logs_dir.mkdir(parents=True, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = logs_dir / f"合并日志_{timestamp}.log"
        log_file = safe_path(log_file)

        # 文件日志处理器
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    except Exception as e:
        # 降级处理：仅使用控制台日志
        print(f"⚠️ 日志文件初始化失败: {str(e)}，仅输出到控制台")
        log_file = None

    # 控制台日志处理器
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    return logger, log_file  # 确保返回tuple

# ================== 文件归档 ==================
def organize_files(input_folder, archive_folder, logger):
    """安全文件归档（与原代码相同）"""
    moved_files = []
    archive_folder.mkdir(parents=True, exist_ok=True)

    for src_file in input_folder.glob('**/*'):
        if archive_folder in src_file.parents:
            continue

        if src_file.is_file() and src_file.suffix.lower() in ('.xlsx', '.xls', '.csv'):
            try:
                relative_path = src_file.relative_to(input_folder)
                dest_file = archive_folder / relative_path
                dest_file = safe_path(dest_file)

                counter = 1
                while dest_file.exists():
                    dest_file = dest_file.with_stem(f"{dest_file.stem[:25]}_{counter}")
                    dest_file = safe_path(dest_file)
                    counter += 1

                dest_file.parent.mkdir(parents=True, exist_ok=True)
                shutil.move(str(src_file), str(dest_file))
                moved_files.append(dest_file)
                logger.info(f"已归档: {relative_path}")

            except Exception as e:
                logger.error(f"归档失败: {src_file.name} - {str(e)}")
    return moved_files

# ================== 格式复制函数 ==================
def copy_sheet_style(source_sheet, target_sheet):
    """深度复制工作表格式（兼容openpyxl 3.1.5+）"""
    # 复制列宽
    for col in source_sheet.column_dimensions.values():
        target_dim = target_sheet.column_dimensions[col.letter]
        target_dim.width = col.width
        if col.hidden:
            target_dim.hidden = True

    # 复制行高（修复RowDimension错误）
    for row_dim in source_sheet.row_dimensions.values():
        target_dim = target_sheet.row_dimensions[row_dim.index]  # 使用.index获取行号
        target_dim.height = row_dim.height
        if row_dim.hidden:
            target_dim.hidden = True

    # 复制单元格样式（修复弃用警告）
    for row in source_sheet.iter_rows():
        for cell in row:
            try:
                new_cell = target_sheet.cell(
                    row=cell.row, column=cell.column, value=cell.value
                )
                if cell.has_style:
                    # 使用copy模块复制样式对象
                    new_cell.font = copy.copy(cell.font)
                    new_cell.border = copy.copy(cell.border)
                    new_cell.fill = copy.copy(cell.fill)
                    new_cell.number_format = cell.number_format
                    new_cell.alignment = copy.copy(cell.alignment)
            except IllegalCharacterError:
                cleaned_value = re.sub(r'[\x00-\x1f]', '', str(cell.value))
                target_sheet.cell(
                    row=cell.row, column=cell.column, value=cleaned_value
                )

# ================== 合并核心逻辑 ==================
def merge_files(moved_files, output_path, logger):
    """合并文件并保留格式（修复版）"""
    stats = {'total': 0, 'success': 0, 'failed': 0}

    # 初始化目标工作簿
    if output_path.exists():
        target_wb = load_workbook(output_path)
    else:
        # 正确创建新工作簿并保存
        target_wb = Workbook()
        target_wb.save(output_path)
        target_wb = load_workbook(output_path)  # 重新加载以保持一致性

    existing_sheets = set(target_wb.sheetnames)

    for archived_path in moved_files:
        try:
            if archived_path.suffix.lower() in ('.xlsx', '.xls'):
                # 处理Excel文件
                source_wb = load_workbook(archived_path, read_only=False)
                for sheet_name in source_wb.sheetnames:
                    try:
                        # 生成合法工作表名称
                        base_name = re.sub(r'[\\/*?:[\]]', '', sheet_name)[:31].strip()
                        unique_name = base_name
                        counter = 1

                        while unique_name in existing_sheets:
                            unique_name = f"{base_name}_副本{counter}"
                            counter += 1

                        # 复制工作表
                        source_sheet = source_wb[sheet_name]
                        new_sheet = target_wb.create_sheet(unique_name)
                        copy_sheet_style(source_sheet, new_sheet)
                        
                        existing_sheets.add(unique_name)
                        stats['success'] += 1
                        logger.info(f"合并成功(保留格式): {archived_path.name} → {unique_name}")

                    except Exception as e:
                        stats['failed'] += 1
                        logger.error(f"工作表错误: {archived_path.name} - {str(e)}", exc_info=True)
                stats['total'] += 1
                source_wb.close()

            elif archived_path.suffix.lower() == '.csv':
                # 处理CSV文件（无法保留格式）
                try:
                    base_name = archived_path.stem[:31].strip()
                    unique_name = base_name
                    counter = 1

                    while unique_name in existing_sheets:
                        unique_name = f"{base_name}_副本{counter}"
                        counter += 1

                    # 使用pandas写入CSV数据
                    df = pd.read_csv(archived_path, encoding='utf-8-sig')
                    new_sheet = target_wb.create_sheet(unique_name)
                    
                    # 写入数据
                    for r_idx, row in enumerate(df.itertuples(index=False), 1):
                        for c_idx, value in enumerate(row, 1):
                            new_sheet.cell(row=r_idx, column=c_idx, value=value)
                    
                    existing_sheets.add(unique_name)
                    stats['success'] += 1
                    logger.info(f"合并成功(CSV数据): {archived_path.name} → {unique_name}")

                except Exception as e:
                    stats['failed'] += 1
                    logger.error(f"CSV错误: {archived_path.name} - {str(e)}", exc_info=True)
                stats['total'] += 1

        except Exception as e:
            stats['failed'] += 1
            logger.error(f"文件错误: {archived_path.name} - {str(e)}", exc_info=True)

    # 清理默认工作表
    if "Sheet" in target_wb.sheetnames:
        del target_wb["Sheet"]
    
    target_wb.save(output_path)
    target_wb.close()
    return stats

# ================== 主流程 ==================
def main(folder_name="合并文件夹", output_name="合并结果.xlsx"):
    """改进后的主流程"""
    desktop = Path.home() / "Desktop"
    base_folder = desktop / folder_name
    output_path = base_folder / output_name
    archive_folder = base_folder / "原始文件备份"

    start_time = datetime.now()
    logger = None
    log_file = None

    try:
        # 确保基础目录存在
        base_folder.mkdir(exist_ok=True, parents=True)
        
        # 初始化日志系统
        logger, log_file = setup_logger(base_folder)
        if logger is None:
            raise RuntimeError("日志系统初始化失败")

        logger.info(f"\n{'=' * 30} 开始合并 {'=' * 30}")
        logger.info("正在备份原始文件...")
        moved_files = organize_files(base_folder, archive_folder, logger)
        logger.info(f"归档完成，共处理 {len(moved_files)} 个文件")

        logger.info("开始合并数据...")
        stats = merge_files(moved_files, output_path, logger)

        logger.info(f"\n{'=' * 30} 合并完成 {'=' * 30}")
        logger.info(f"文件总数: {stats['total']}")
        logger.info(f"成功: {stats['success']} / 失败: {stats['failed']}")
        if log_file:
            logger.info(f"日志文件: {log_file.relative_to(base_folder)}")
        logger.info(f"结果文件: {output_path.relative_to(base_folder)}")

    except Exception as e:
        duration = datetime.now() - start_time
        if logger:
            logger.critical(f"严重错误: {str(e)}", exc_info=True)
            logger.info(f"脚本总耗时: {duration.total_seconds():.2f}秒")
        else:
            print(f"严重错误: {str(e)}，耗时: {duration.total_seconds():.2f}秒")
        raise
    else:
        duration = datetime.now() - start_time
        logger.info(f"脚本总耗时: {duration.total_seconds():.2f}秒")

if __name__ == "__main__":
    print("提示：建议启用Windows长路径支持（系统设置 > 关于 > 高级系统设置）")
    print("依赖要求：openpyxl>=3.0, pandas>=1.3.5")
    print("安装命令：pip install --upgrade pandas openpyxl xlrd")

    parser = argparse.ArgumentParser(description="表格合并工具（支持格式保留）")
    parser.add_argument('-f', '--folder', default='合并文件夹',
                        help='桌面上的合并文件夹名称（默认：合并文件夹）')
    parser.add_argument('-o', '--output', default='合并结果.xlsx',
                        help='输出文件名（默认：合并结果.xlsx）')

    args = parser.parse_args()

    try:
        main(
            folder_name=args.folder,
            output_name=args.output
        )
    except Exception as e:
        print(f"程序终止: {str(e)}")
